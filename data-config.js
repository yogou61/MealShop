// data-config.js

const categoriesData = [
    { name: 'Rapide', icon: '‚ö°Ô∏è', tag: 'rapide' },
    { name: 'Familial', icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶', tag: 'familial' },
    { name: 'Healthy', icon: 'ü•ó', tag: 'healthy' },
    { name: '√âconomique', icon: 'üí∞', tag: 'economique' },
    { name: 'V√©g√©tarien', icon: 'ü•¶', tag: 'vegetarien' },
    { name: 'Monde', icon: 'üåç', tag: 'monde' },
    { name: 'Saisonnier', icon: 'üçÇ', tag: 'saisonnier' },
    { name: 'Sp√©cial', icon: 'üéâ', tag: 'special' },
    { name: 'Sans Gluten', icon: 'üåæ', tag: 'sansgluten' },
    { name: 'Sans Lactose', icon: 'ü•õ', tag: 'sanslactose' },
    { name: '√Ä Emporter', icon: 'ü•°', tag: 'emporter' },
    { name: 'L√©ger', icon: 'üçÉ', tag: 'leger' }
];

const rayonsLeclerc = [ 
    'Fruits et L√©gumes', 'Viandes et Poissons', 'Pains P√¢tisseries',
    'Laitier Oeufs V√©g√©tal', 'Charcuterie Traiteur', 'Surgel√©s',
    'Epicerie sal√©e', 'Epicerie sucr√©e', 'Boissons', 'Autre'
];

function classerIngredientParMotCle(nomIngredient) {
    const ingredientLowerCase = nomIngredient.toLowerCase();
    if (['pomme', 'carotte', 'oignon', 'tomate', 'salade', 'concombre', 'poivron', 'courgette', 'aubergine', '√©pinard', 'poireau', 'c√©leri', 'avocat', 'citron', 'orange', 'banane', 'fraise', 'figue', 'persil', 'coriandre', 'basilic', 'menthe', 'ciboulette', '√©chalote', 'ail', 'champignon', 'brocoli', 'chou', 'gingembre', 'herbes de provence', 'thym', 'romarin'].some(term => ingredientLowerCase.includes(term))) return 'Fruits et L√©gumes';
    if (['poulet', 'dinde', 'boeuf', 'porc', 'veau', 'agneau', 'saumon', 'cabillaud', 'thon', 'crevette', 'poisson', 'viande', 'filet mignon'].some(term => ingredientLowerCase.includes(term))) return 'Viandes et Poissons';
    if (['pain', 'baguette', 'tortilla', 'wrap', 'galette', 'p√¢te bris√©e', 'p√¢te feuillet√©e', 'pita', 'nouilles de riz', 'nouilles chinoises', 'spaghetti', 'p√¢tes', 'gnocchi'].some(term => ingredientLowerCase.includes(term))) return 'Pains P√¢tisseries'; // P√¢tes souvent ici ou √©picerie sal√©e
    if (['lait', 'cr√®me fra√Æche', 'beurre', 'yaourt', 'fromage', 'oeuf', '≈ìuf', 'tofu', 'ricotta', 'parmesan', 'cheddar', 'mozzarella', 'comt√©', 'emmental', 'ch√®vre frais', 'feta', 'b√©chamel', 'gorgonzola'].some(term => ingredientLowerCase.includes(term))) return 'Laitier Oeufs V√©g√©tal';
    if (['jambon', 'lardon', 'saucisse', 'chorizo', 'bacon', 'salami'].some(term => ingredientLowerCase.includes(term))) return 'Charcuterie Traiteur';
    if (['surgel√©'].some(term => ingredientLowerCase.includes(term))) return 'Surgel√©s';
    if (['farine', /*'p√¢tes',*/ 'riz', 'semoule', 'quinoa', 'lentilles corail', 'pois chiches', 'haricots noirs', 'huile d\'olive', 'huile de s√©same', 'huile v√©g√©tale', 'vinaigre de riz', 'moutarde', 'sauce soja', 'sauce poisson', 'sauce tomate', 'concentr√© de tomate', 'bouillon de l√©gumes', 'bouillon de boeuf', 'sel', 'poivre', '√©pices', 'curcuma', 'cumin', 'coriandre en poudre', 'paprika', 'piment d\'espelette', 'graines de s√©same', 'sauce tahini'].some(term => ingredientLowerCase.includes(term))) return 'Epicerie sal√©e';
    if (['sucre brun', 'miel', 'chocolat', 'cacahu√®tes concass√©es'].some(term => ingredientLowerCase.includes(term))) return 'Epicerie sucr√©e';
    if (['lait de coco'].some(term => ingredientLowerCase.includes(term))) return 'Boissons'; // Ou √©picerie du monde/sal√©e
    return 'Autre';
}

// Fonction d'aide pour parser les lignes d'ingr√©dients de votre liste textuelle
// Entr√©e: "‚Ä¢ 2 grandes tortillas de bl√©"
// Sortie: { quantity: "2", nom: "grandes tortillas de bl√©" }
function parseIngredientLineForRecipeData(line) {
    const cleanedLine = line.replace(/^‚Ä¢\s*/, '').trim();

    // G√©rer "Sel et poivre" comme un cas sp√©cial
    if (cleanedLine.toLowerCase() === "sel et poivre") {
        return { quantity: "Au go√ªt", nom: "Sel et poivre" };
    }
     // G√©rer "Sel" et "Poivre" seuls
    if (cleanedLine.toLowerCase() === "sel") {
        return { quantity: "Au go√ªt", nom: "Sel" };
    }
    if (cleanedLine.toLowerCase() === "poivre") {
        return { quantity: "Au go√ªt", nom: "Poivre" };
    }
    if (cleanedLine.toLowerCase().includes("au go√ªt") || cleanedLine.toLowerCase().includes("selon besoin")) {
        return { quantity: cleanedLine, nom: "" }; // Le nom est implicite dans la quantit√©
    }


    // Regex pour extraire quantit√© (chiffres, fractions simples, et certaines abr√©viations) et le reste
    // Modifi√© pour mieux capturer les unit√©s attach√©es √† la quantit√©
    const match = cleanedLine.match(/^([\d.,\/]+(?:\s*(?:g|kg|ml|l|cl|c\.s\.|c\.c\.|cs|cc|tranche|bo√Æte|verre|tasse|feuille|petit|grand|gousse|branche))?s?)\s*(?:de\s+|d\')?(.*)/i);

    if (match && match[1] && match[2]) {
        let quantity = match[1].trim();
        let nom = match[2].trim();
        return { quantity, nom };
    } else if (cleanedLine.match(/^[\d.,\/]+/)) { // Si √ßa commence par un nombre mais sans unit√© claire captur√©e
        const firstSpaceIndex = cleanedLine.indexOf(' ');
        if (firstSpaceIndex > 0) {
            return { quantity: cleanedLine.substring(0, firstSpaceIndex).trim(), nom: cleanedLine.substring(firstSpaceIndex + 1).trim() };
        }
    }

    // Si aucun pattern num√©rique n'est trouv√©, on consid√®re "1" comme quantit√© et la ligne comme nom
    return { quantity: "1", nom: cleanedLine };
}